<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bruno57.ResultPattern</name>
    </assembly>
    <members>
        <member name="T:Bruno57.ResultPattern.Foundations.Extensions.FluentValidationFailureExtension">
            <summary>
            Fluent Validation Result extension to populate Validation Error collection
            </summary>
        </member>
        <member name="T:Bruno57.ResultPattern.Foundations.Result`1">
            <summary>
            Result class.
            Use this when you want to return a result from an implementation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result`1.#ctor(Bruno57.ResultPattern.Foundations.Enums.ResultStatus)">
            <summary>
            A constructor that accepts <paramref name="status"/>.
            It is used internally in this class and Result.Void
            </summary>
            <param name="status">Constructor parameter of type <paramref name="status"/></param>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result`1.#ctor">
            <summary>
            Default protected constructor.
            </summary>
            <remarks>
            It is used in Result.Void to return an instance of Success status without needing to pass any extra types.
            </remarks>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result`1.#ctor(`0)">
            <summary>
            A constructor that accepts <paramref name="data"/>.
            It is used internally by this class.
            </summary>
            <param name="data">Constructor parameter of type <paramref name="data"/></param>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result`1.#ctor(`0,System.String)">
            <summary>
            A constructor that accepts <paramref name="data"/>.
            It is used by the 'Success' method when a Success Message needed to be set.
            </summary>
            <param name="data">Constructor parameter of type <paramref name="data"/></param>
            <param name="successMessage">Constructor parameter of type <paramref name="successMessage"/></param>
        </member>
        <member name="P:Bruno57.ResultPattern.Foundations.Result`1.IsSuccess">
            <summary>
            Use this property to easily determine if the status is OK or not
            </summary>
        </member>
        <member name="P:Bruno57.ResultPattern.Foundations.Result`1.Data">
            <summary>
            Data property of type <typeparamref name="T"/> which holds the details of the result as a JSON field.
            </summary>
        </member>
        <member name="P:Bruno57.ResultPattern.Foundations.Result`1.Status">
            <summary>
            Use this property to accurately determine the exact status of the Result
            </summary>
        </member>
        <member name="P:Bruno57.ResultPattern.Foundations.Result`1.ErrorMessages">
            <summary>
            Error Message collection
            </summary>
        </member>
        <member name="P:Bruno57.ResultPattern.Foundations.Result`1.ValidationErrors">
            <summary>
            Set is protected and accessible by derived classes
            </summary>
        </member>
        <member name="P:Bruno57.ResultPattern.Foundations.Result`1.SuccessMessage">
            <summary>
            Use this property to access the success message
            </summary>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result`1.Success(`0)">
            <summary>
            Successful operation with a value as a result
            </summary>
            <param name="data">Data parameter for setting value to it</param>
            <returns>A Result object of <typeparamref name="T"/> </returns>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result`1.Success(`0,System.String)">
            <summary>
            Successful operation with a value as a result and a custom message.
            </summary>
            <param name="data">Data parameter for setting value to it</param>
            <param name="successMessage">A custom success message</param>
            <returns>A Result object of <typeparamref name="T"/> </returns>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result`1.Error(System.String)">
            <summary>
            Represents a situation where an error occurred.
            </summary>
            <param name="errorMessage">A custom error message</param>
            <returns>A Result object of <typeparamref name="T"/></returns>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result`1.NotFound">
            <summary>
            Represents a situation where the resource is not found.
            </summary>
            <returns>A Result object of <typeparamref name="T"/></returns>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result`1.Invalid(System.Collections.Generic.IEnumerable{Bruno57.ResultPattern.Foundations.ValidationError})">
            <summary>
            Represents an invalid result with validation errors.
            Use this when validation in your application failed.
            </summary>
            <param name="validationErrors">A list of validation errors</param>
            <returns>A Result object of <typeparamref name="T"/></returns>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result`1.op_Implicit(`0)~Bruno57.ResultPattern.Foundations.Result{`0}">
            <summary>
            An operator to automatically convert the return type in a method to the type being returned
            </summary>
            <param name="data">The return data</param>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result`1.op_Implicit(Bruno57.ResultPattern.Foundations.Result{`0})~`0">
            <summary>
            
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result`1.op_Implicit(Bruno57.ResultPattern.Foundations.Result)~Bruno57.ResultPattern.Foundations.Result{`0}">
            <summary>
            An operator to automatically convert the return type in a method to the default state
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:Bruno57.ResultPattern.Foundations.Result">
            <summary>
            A different variant of the global Result.
            Use this when you want to populate/return Result without having to specify its T 'Data' type.
            </summary>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result.#ctor">
            <summary>
            Private constructor that is used in this class.
            No need to set Status here as its default id OK.
            </summary>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result.#ctor(Bruno57.ResultPattern.Foundations.Enums.ResultStatus)">
            <summary>
            A constructor that accepts <paramref name="status"/>
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result.Success">
            <summary>
            Represents a successful operation without a return type
            </summary>
            <returns>A Success Result</returns>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result.Invalid(System.Collections.Generic.IEnumerable{Bruno57.ResultPattern.Foundations.ValidationError})">
            <summary>
            Represents invalid result with validation errors.
            </summary>
            <param name="validationErrors"></param>
            <returns>An Invalid Result</returns>
        </member>
        <member name="M:Bruno57.ResultPattern.Foundations.Result.Error(System.String)">
            <summary>
            Represents the error result with the error message
            </summary>
            <returns>An Error Result</returns>
        </member>
    </members>
</doc>
